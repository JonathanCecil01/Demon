{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#include <unistd.h>\
#include <sys/types.h>\
#include <sys/stat.h>\
#include <string.h>\
#include <syslog.h>\
#include <dirent.h>\
#include <time.h>\
\
\
int remove_files(const char* directory);\
int remove_files(const char* directory) \{\
\
    DIR *dp;\
    struct dirent *dirp;\
    int files_deleted = 0;\
    int count=0;\
    chdir(directory);\
    dp = opendir(".");\
    while ( (dirp = readdir(dp)) != 0x00 ) \{\
        if(remove(dirp->d_name)<0)\
         perror(dirp->d_name);\
        else\
         files_deleted++;\
    \}\
    closedir(dp);\
    return files_deleted;\
\}\
\
\
\
\
\
//main\
int main(int argc, char* argv[])\
\{\
FILE *fp= NULL;\
pid_t process_id = 0;\
pid_t sid = 0;\
// Create child process\
process_id = fork();\
// Indication of fork() failure\
if (process_id < 0)\
\{\
printf("fork failed!\\n");\
// Return failure in exit status\
exit(1);\
\}\
// PARENT PROCESS. Need to kill it.\
if (process_id > 0)\
\{\
printf("process_id of child process %d \\n", process_id);\
// return success in exit status\
exit(0);\
\}\
//unmask the file mode\
umask(0);\
//set new session\
sid = setsid();\
if(sid < 0)\
\{\
// Return failure\
exit(1);\
\}\
// Change the current working directory to root.\
chdir("/");\
// Close stdin. stdout and stderr\
close(STDIN_FILENO);\
close(STDOUT_FILENO);\
close(STDERR_FILENO);\
// Open a log file in write mode.\
fp = fopen ("Log.txt", "w+");\
int i=0;\
while (1)\
\{\
\
//Dont block context switches, let the process sleep for some time\
fprintf(fp, "%d files deleted \\n", remove_files("/home/kali/Trial/"));\
fflush(fp);\
sleep(10);\
// Implement and call some function that does core work for this daemon.\
\}\
fclose(fp);\
return (0);\
\}\
}